% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chk-filter.R
\name{chk-helper}
\alias{chk-helper}
\alias{chk_filter}
\alias{chk_filter_vars}
\alias{chk_filter_all}
\alias{chk_filter_any}
\alias{chk_filter_where}
\title{Checking helper functions}
\usage{
chk_filter(data, var, func, flt = TRUE, args = list())

chk_filter_vars(data, vars, func, flt = TRUE, args = list())

chk_filter_all(data, vars, func, flt = TRUE, args = list())

chk_filter_any(data, vars, func, flt = TRUE, args = list())

chk_filter_where(data, where, func, flt = TRUE, args = list())
}
\arguments{
\item{data}{a \code{tbl}}

\item{var}{a single column to check}

\item{func}{a function to use use for checking. The provided function should
take a single vector as input and return a logical vector.}

\item{flt}{a logical expression to be applied as a filter for the check. This
will be evaluated in the context of data}

\item{args}{a list of additional arguments to be added to the function calls.}

\item{vars}{a list of columns to check generated by \link[dplyr:vars]{vars()}}

\item{where}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> columns to check}

\item{cols}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> columns to check}
}
\value{
A logical vector flagging records that have passed or failed the
check, with \code{NA} where records do not meet the filter
}
\description{
These helper functions allowing easy checking over multiple columns and
filtering to subsets of the data:
\itemize{
\item \code{chk_filter} applies \code{func} with \code{args} to \code{var} in \code{data} filtered
with \code{flt} and returns the resulting logical vector.
\item \code{chk_filter_vars} applies \code{func} with \code{args} to \code{vars} in \code{data}
filtered with \code{flt} and returns a dataframe containing the resulting
logical vectors.
\item \code{chk_filter_all} and \code{chk_filter_any} are wrappers around
\code{chk_filter_vars} which return a single logical vector produced by
taking the conjunction and disjunction, respectively, of the columns
in the output of \code{chk_filter_vars}
\item \code{chk_filter_where} works exactly the same as \code{chk_filter_all} except that
the variables are specified not using \code{dplyr::vars()} (\code{vars}) but using
bare \code{\link[=dplyr_tidy_select]{tidy-select}} functions (\code{where}).
}
}
\examples{

# Check that every 4-cylinder car has an engine displacement of < 100 cubic
# inches
x <- chk_filter(mtcars, disp, chk_range, cyl == 4, list(min = 0, max = 100))
all(x, na.rm = TRUE)

# Check that every 4-cylinder car has an engine displacement of < 100 cubic
# inches AND < 100 horsepower
chk_filter_all(
  mtcars,
  c("disp", "hp"),
  chk_range,
  cyl == 4,
  list(min = 0, max = 100)
)

# Check that columns made up of whole numbers are binary
chk_filter_where(
  mtcars,
  where(~ all(. \%\% 1 == 0)),
  chk_values,
  TRUE,
  list(0:1)
)

}
\seealso{
\link[=chk-generic]{Generic Checking Functions}
}
