% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expect-unique.R
\name{uniqueness-expectations}
\alias{uniqueness-expectations}
\alias{expect_unique}
\alias{expect_unique_across}
\alias{expect_unique_combine}
\title{Expectations: uniqueness checks}
\usage{
expect_unique(
  vars,
  exclude = getOption("testdat.miss"),
  flt = TRUE,
  data = get_testdata()
)

expect_unique_across(
  vars,
  exclude = getOption("testdat.miss"),
  flt = TRUE,
  data = get_testdata()
)

expect_unique_combine(
  vars,
  exclude = getOption("testdat.miss"),
  flt = TRUE,
  data = get_testdata()
)
}
\arguments{
\item{vars}{a list of columns generated by \link[dplyr:vars]{vars()}}

\item{exclude}{a vector of values to exclude from uniqueness check, defaults
to \code{getOption("testdat.miss")} which is \code{c(NA, "")} by default. To include
all values, set \code{exclude=NULL}.}

\item{flt}{a filter specifying a subset of the dataset to test}

\item{data}{data frame to test. The \link[=global-data]{global test data} is used
by default.}
}
\description{
These functions test variables for uniqueness:
\itemize{
\item \code{expect_unique} tests a set of variables (\code{vars}) and fails if the
variables collectively do not uniquely identify the observations
\item \code{expect_unique_across} tests a set of variables (\code{vars}) and fails if
each observation does not have different values in each of the variables in
\code{vars}.
\item \code{expect_unique_combine} tests a set of variables (\code{vars}) and fails if
any values appear more than once across all of them.
}
}
\details{
By default the uniqueness check excludes missing values (as specified by
\code{getOption("testdat.miss")}). Setting \code{exclude=NULL} will include all values.
}
\examples{

student_fruit_preferences <- data.frame(
  student_id = c(1:5, NA, NA),
  apple = c(1, 1, 1, 1, 99, NA, NA),
  orange = c(2, 3, 2, 3, 99, NA, NA),
  banana = c(3, 2, 3, 2, 99, NA, NA),
  phone1 = c(123, 456, 789, 987, 654, NA, NA),
  phone2 = c(345, 678, 987, 567, 000, NA, NA)
)

# Check that key is unique, excluding NAs by default
expect_unique(student_id, data = student_fruit_preferences)

# Check that key is unique, including NAs
try(expect_unique(student_id, exclude = NULL, data = student_fruit_preferences))

# Check each fruit has unique preference number
try(
expect_unique_across(
  c(apple, orange, banana),
  data = student_fruit_preferences
)
)

# Check each fruit has unique preference number, allowing multiple 99 (item skipped) codes
expect_unique_across(
  c(apple, orange, banana),
  exclude = c(99, NA), data = student_fruit_preferences
)

# Check that each phone number appears at most once
try(expect_unique_combine(c(phone1, phone2), data = student_fruit_preferences))
}
\seealso{
Other data expectations: 
\code{\link{chk-expectations}},
\code{\link{conditional-expectations}},
\code{\link{datacomp-expectations}},
\code{\link{exclusivity-expectations}},
\code{\link{generic-expectations}}
}
\concept{data expectations}
